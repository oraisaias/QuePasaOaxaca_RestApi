-- Extensiones necesarias
CREATE EXTENSION IF NOT EXISTS citext;
CREATE EXTENSION IF NOT EXISTS pgcrypto; -- para gen_random_uuid()

-- Tipos
CREATE TYPE user_role    AS ENUM ('admin','user');
CREATE TYPE event_status AS ENUM ('draft','published','archived');

-- Usuarios
CREATE TABLE users (
  id            UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  email         CITEXT UNIQUE NOT NULL,
  password_hash TEXT NOT NULL,
  role          user_role NOT NULL DEFAULT 'admin',
  created_at    TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at    TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- Categorías
CREATE TABLE categorias (
  id          UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  nombre      TEXT NOT NULL UNIQUE,
  descripcion TEXT,
  created_at  TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at  TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- Eventos
CREATE TABLE eventos (
  id               UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  titulo           TEXT NOT NULL,
  descripcion      TEXT,
  imagen_url       TEXT,
  fecha_inicio     TIMESTAMPTZ NOT NULL,
  fecha_fin        TIMESTAMPTZ,
  lat              NUMERIC(9,6),
  lng              NUMERIC(9,6),
  direccion_texto  TEXT,
  precio           NUMERIC(10,2),         -- opcional
  enlace_externo   TEXT,
  status           event_status NOT NULL DEFAULT 'draft',
  created_by       UUID REFERENCES users(id) ON DELETE SET NULL,
  created_at       TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at       TIMESTAMPTZ NOT NULL DEFAULT now(),
  published_at     TIMESTAMPTZ,
  CONSTRAINT eventos_fechas_chk CHECK (fecha_fin IS NULL OR fecha_fin >= fecha_inicio),
  CONSTRAINT eventos_lat_chk    CHECK (lat IS NULL OR (lat >= -90 AND lat <= 90)),
  CONSTRAINT eventos_lng_chk    CHECK (lng IS NULL OR (lng >= -180 AND lng <= 180)),
  CONSTRAINT eventos_precio_chk CHECK (precio IS NULL OR precio >= 0)
);

-- Relación N:M evento <-> categoría
CREATE TABLE evento_categorias (
  evento_id    UUID NOT NULL REFERENCES eventos(id) ON DELETE CASCADE,
  categoria_id UUID NOT NULL REFERENCES categorias(id) ON DELETE CASCADE,
  PRIMARY KEY (evento_id, categoria_id)
);

-- Favoritos (usuarios registrados)
CREATE TABLE user_favorites (
  user_id    UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  event_id   UUID NOT NULL REFERENCES eventos(id) ON DELETE CASCADE,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  PRIMARY KEY (user_id, event_id)
);

-- Favoritos (dispositivo anónimo)
CREATE TABLE device_favorites (
  device_id  TEXT NOT NULL,
  event_id   UUID NOT NULL REFERENCES eventos(id) ON DELETE CASCADE,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  PRIMARY KEY (device_id, event_id)
);

-- Índices
CREATE INDEX idx_eventos_status        ON eventos (status);
CREATE INDEX idx_eventos_fecha_inicio  ON eventos (fecha_inicio);
CREATE INDEX idx_evento_categorias_cat ON evento_categorias (categoria_id);
